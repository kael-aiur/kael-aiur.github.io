I"'-<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#下载nginx镜像" id="markdown-toc-下载nginx镜像">下载nginx镜像</a></li>
  <li><a href="#运行docker镜像并获取默认配置" id="markdown-toc-运行docker镜像并获取默认配置">运行docker镜像并获取默认配置</a></li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
</ul>

<h2 id="前言">前言</h2>

<p>出于测试目的，偶尔会突然需要使用nginx,但是测试完之后又不想让nginx一直运行，这时候就可以使用docker官方提供的nginx镜像，然后写几份配置保存下来即可。</p>

<p>我在自己的电脑装了虚拟机，在虚拟机中安装CentOS 7的操作系统，本文基于这样的环境，在虚拟机中运行nginx的docker镜像。</p>

<p>参考<a href="https://hub.docker.com/_/nginx/">Docker官方Nginx镜像</a></p>

<h2 id="下载nginx镜像">下载nginx镜像</h2>

<p>官方镜像下载非常简单：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker pull nginx
</code></pre></div></div>

<blockquote>
  <p><strong>注意：</strong> 如果没有启动docker的守护进程，需要先启动：<code class="highlighter-rouge">service docker start</code>。</p>
</blockquote>

<p>经过一小段时间等待镜像下载完成即可。</p>

<p>下载完成后，可以通过如下命令查看docker镜像：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
nginx               latest              1e5ab59102ce        13 days ago         108 MB
</code></pre></div></div>

<h2 id="运行docker镜像并获取默认配置">运行docker镜像并获取默认配置</h2>

<p>要获取默认配置，我们需要进入到容器的系统中去，这时需要先运行容器。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker run <span class="nt">--name</span> default-nginx <span class="nt">-d</span> nginx
</code></pre></div></div>

<p>这样容器就运行起来了，接下来进入docker镜像：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker <span class="nb">exec</span> <span class="nt">-it</span> default-nginx bash
root@b82b1228eae7:/#
</code></pre></div></div>

<p>进到docker容器后，就和普通的命令行操作一样了。</p>

<p>nginx镜像的默认配置文件位置在</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$&gt; cat /etc/nginx/nginx.conf
user  nginx;
worker_processes  1;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;
events {
    worker_connections  1024;
}
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    include /etc/nginx/conf.d/*.conf;
}
</code></pre></div></div>

<p>这个是根配置文件，我们使用这个配置直接重写是可以的，但是实际上为了减少我们的配置量，建议只从写代理部分的配置即可，从上面的配置文件可以看出，这里的配置<code class="highlighter-rouge">include</code>了<code class="highlighter-rouge">/etc/nginx/conf.d/</code>这个目录下的全部<code class="highlighter-rouge">.conf</code>配置。</p>

<p>实际上只有一个文件：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> <span class="nb">cat</span> /etc/nginx/conf.d/default.conf
server <span class="o">{</span>
    listen       80<span class="p">;</span>
    server_name  localhost<span class="p">;</span>

    <span class="c">#charset koi8-r;</span>
    <span class="c">#access_log  /var/log/nginx/host.access.log  main;</span>

    location / <span class="o">{</span>
        root   /usr/share/nginx/html<span class="p">;</span>
        index  index.html index.htm<span class="p">;</span>
    <span class="o">}</span>

    <span class="c">#error_page  404              /404.html;</span>

    <span class="c"># redirect server error pages to the static page /50x.html</span>
    <span class="c">#</span>
    error_page   500 502 503 504  /50x.html<span class="p">;</span>
    location <span class="o">=</span> /50x.html <span class="o">{</span>
        root   /usr/share/nginx/html<span class="p">;</span>
    <span class="o">}</span>

    <span class="c"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
    <span class="c">#</span>
    <span class="c">#location ~ \.php$ {</span>
    <span class="c">#    proxy_pass   http://127.0.0.1;</span>
    <span class="c">#}</span>

    <span class="c"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
    <span class="c">#</span>
    <span class="c">#location ~ \.php$ {</span>
    <span class="c">#    root           html;</span>
    <span class="c">#    fastcgi_pass   127.0.0.1:9000;</span>
    <span class="c">#    fastcgi_index  index.php;</span>
    <span class="c">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
    <span class="c">#    include        fastcgi_params;</span>
    <span class="c">#}</span>

    <span class="c"># deny access to .htaccess files, if Apache's document root</span>
    <span class="c"># concurs with nginx's one</span>
    <span class="c">#</span>
    <span class="c">#location ~ /\.ht {</span>
    <span class="c">#    deny  all;</span>
    <span class="c">#}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里我们可以把这个<code class="highlighter-rouge">default.conf</code>的内容全部复制出来。</p>

<p>现在退出容器：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> <span class="nb">exit
exit</span>
<span class="o">[</span>root@localhost ~]# 
</code></pre></div></div>

<p>在<code class="highlighter-rouge">/root</code>目录下创建一个<code class="highlighter-rouge">nginx.conf</code>文件，并将刚刚复制的<code class="highlighter-rouge">default.conf</code>配置粘贴进来。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> <span class="nb">ls
</span>anaconda-ks.cfg  download  kaelkaelkael.pem  nginx.conf<span class="o">(</span>1<span class="o">)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>(1).</strong> 我们刚刚创建的配置文件。</p>
</blockquote>

<p>现在修改<code class="highlighter-rouge">nginx.conf</code>的配置，将</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location / <span class="o">{</span>
    root   /usr/share/nginx/html<span class="p">;</span>
    index  index.html index.htm<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>修改为：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>location / <span class="o">{</span>
    proxy_pass http://192.168.85.1:8099<span class="p">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>即所有根目录的请求全部转发到<code class="highlighter-rouge">http://192.168.85.1:8099</code>这个地址来。</p>

<p>这个地址是我本地物理机的IP，我写了一个简单的服务，返回请求的所有请求头。</p>

<p>现在我们启动docker容器，并指定使用<code class="highlighter-rouge">/root/nginx.conf</code>配置替换<code class="highlighter-rouge">/etc/nginx/conf.d/default.conf</code>配置,同时将虚拟机的8080端口映射到容器的80端口。</p>

<p>为了防止容器同名冲突，我们先删掉刚刚启动的默认镜像：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker <span class="nb">rm</span> <span class="nt">-f</span> mynginx
</code></pre></div></div>

<p>启动容器：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker run <span class="nt">--name</span> mynginx <span class="nt">-p</span> 8080:80 <span class="nt">-v</span> /root/nginx.conf:/etc/nginx/conf.d/default.conf <span class="nt">-d</span> nginx
</code></pre></div></div>

<p>查看容器启动状态：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker ps
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES
b82b1228eae7        nginx               <span class="s2">"nginx -g 'daemon ..."</span>   26 minutes ago      Up 26 minutes       0.0.0.0:8080-&gt;80/tcp   mynginx
</code></pre></div></div>

<blockquote>
  <p><strong>注意：</strong> 如果发现容器没有启动成功，有可能是配置出错了，这个时候可以通过docker的启动日志检查原因：</p>

  <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> docker logs <span class="nt">-f</span> mynginx
192.168.85.1 - - <span class="o">[</span>23/Oct/2017:23:14:20 +0000] <span class="s2">"GET /header_print HTTP/1.1"</span> 200 467 <span class="s2">"-"</span> <span class="s2">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="s2">"-"</span>
192.168.85.1 - - <span class="o">[</span>23/Oct/2017:23:14:21 +0000] <span class="s2">"GET /favicon.ico HTTP/1.1"</span> 404 0 <span class="s2">"http://192.168.85.132:8080/header_print"</span> <span class="s2">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 Safari/537.36"</span> <span class="s2">"-"</span>
</code></pre></div>  </div>

  <p>这个命令有点类似<code class="highlighter-rouge">tail -f</code></p>
</blockquote>

<p>容器启动成功，测试配置是否有效：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$&gt;</span> curl 127.0.0.1:8080/header_print
<span class="o">{</span><span class="s2">"content-length"</span>:<span class="s2">"0"</span>,<span class="s2">"Accept"</span>:<span class="s2">"*/*"</span>,<span class="s2">"Connection"</span>:<span class="s2">"close"</span>,<span class="s2">"User-Agent"</span>:<span class="s2">"curl/7.29.0"</span>,<span class="s2">"Host"</span>:<span class="s2">"192.168.85.1:8099"</span><span class="o">}</span>
</code></pre></div></div>

<p>得到请求头的json，说明转发成功。</p>

<h2 id="总结">总结</h2>

<p>通过这种方式，可以预先配置好多个不同的配置文件，然后准备好不同的脚本，每次需要测试的时候，直接启动脚本即可。</p>
:ET
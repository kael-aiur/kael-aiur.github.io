I"R?<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#tomcat的设计模型" id="markdown-toc-tomcat的设计模型">tomcat的设计模型</a>    <ul>
      <li><a href="#server" id="markdown-toc-server">Server</a></li>
      <li><a href="#service" id="markdown-toc-service">Service</a></li>
      <li><a href="#engine" id="markdown-toc-engine">Engine</a></li>
      <li><a href="#host" id="markdown-toc-host">Host</a></li>
      <li><a href="#context" id="markdown-toc-context">Context</a></li>
      <li><a href="#connector" id="markdown-toc-connector">Connector</a></li>
    </ul>
  </li>
  <li><a href="#tomcat组件的生命周期" id="markdown-toc-tomcat组件的生命周期">tomcat组件的生命周期</a></li>
  <li><a href="#container" id="markdown-toc-container">Container</a></li>
  <li><a href="#一次请求的过程" id="markdown-toc-一次请求的过程">一次请求的过程</a></li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
</ul>

<h2 id="前言">前言</h2>

<p>上一节我们已经通过maven把tomcat的开发环境搭建好了，现在我们可以开始阅读源码了。</p>

<p>在开始之前先给这次读源码定个小目标吧，比方说我先把源码背下来。</p>

<p>好吧开玩笑的，关于tomcat源码解读的系列博客，我准备按照从tomcat启动到处理一次完整的请求再到tomcat关闭的完整过程来读tomcat的源码，这个系列的博客也会按照这个顺序来写，尽量争取能在10月份到来之前完成这个系列的博客。</p>

<p>在按照这个顺序读源码的过程中，可以会遇到很多问题也很多不明白的地方，这些问题可能没办法全部一一解决，首要目标是在保证不影响我们理解的前提下选择性的忽略一些问题，影响我们对源码的理解的问题一定会彻底解决。</p>

<p>本节开始，我们先从宏观的角度上了解一下tomcat的设计模型，当然也会对tomcat中涉及的一些概念进行解释，因此暂时还不会真正涉及源码，可能看起来会比较无聊，不过是相当重要的，也有助于我们后边理解代码。</p>

<h2 id="tomcat的设计模型">tomcat的设计模型</h2>

<p>我们先来看一下tomcat的整体架构模型，如下图：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/tomcat_structs.png" alt="模型架构" title="tomcat模型架构" /></p>

<p>从这个图中我们可以看出，tomcat最顶层的容器是Server，一个Server下有一个或多个Service，一个service下有一个engine，一个engine下有一个或多个host，一个host下有一个或多个context。</p>

<p>另外，整个容器通过connector组件与外界通信。</p>

<p>我们先来了解一下上面提到的这几个概念：</p>

<ul>
  <li>server：指的是整个应用的上下文，也是最顶层的容器，tomcat中所有的东西都在这个server里边。</li>
  <li>service：指的是一个服务，主要的功能是把connector组件和engine组织起来，使得通过connector组件与整个容器通讯的应用可以使用engine提供的服务。</li>
  <li>engine：服务引擎，这个可以理解为一个真正的服务器，内部提供了多个虚拟主机对外服务。</li>
  <li>host：虚拟主机，每一个虚拟主机相当于一台服务器，并且内部可以部署多个应用，每个虚拟主机可以绑定一个域名，并指定多个别名。</li>
  <li>context：应用上下文，每一个webapp都有一个单独的context，也可以理解为每一个context代表一个webapp。</li>
  <li>connector：连接器组件，可以配置多个连接器支持多种协议，如http，APJ等</li>
</ul>

<blockquote>
  <p><strong>注意：</strong> 在网上有看到其他人的博客，其中提到service下可以有一个或多个engine，这里必须明确说明一下，service和engine实际上是<strong>一对一</strong>的关系，一个service中只有一个engine，一个engine也只能属于一个service，这一点在官方文档中有明确说明的，另外，代码中的实现也不支持多个engine。</p>
</blockquote>

<p>接下来我们来看一下各个组件的实现类和它们之间的关系。</p>

<h3 id="server">Server</h3>

<p>我们先从最顶层的Server开始，在tomcat真正使用的实现类是<code class="highlighter-rouge">org.apache.catalina.core.StandardServer</code>，下面是这个类的层次结构图：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/standard_server.png" alt="org.apache.catalina.core.StandardServer" title="org.apache.catalina.core.StandardServer" /></p>

<p>从这个结构图中我们可以看出，Tomcat中定义了<code class="highlighter-rouge">Server</code>这个接口来抽象一个server，并且最终由<code class="highlighter-rouge">StandardServer</code>作为实现类，同时接口<code class="highlighter-rouge">Server</code>继承了另一个更顶层的接口<code class="highlighter-rouge">Lifecycle</code>，这表明<code class="highlighter-rouge">Server</code>本身也有生命周期。</p>

<h3 id="service">Service</h3>

<p>server下面包含一个或多个service，在Tomcat中，定义了一个接口<code class="highlighter-rouge">Service</code>来抽象这个架构中的service，并且最终使用<code class="highlighter-rouge">org.apache.catalina.core.StandardService</code>作为实现类，整个类的层次结构图如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/standard_service.png" alt="org.apache.catalina.core.StandardService" title="org.apache.catalina.core.StandardService" /></p>

<p>这里我可以看到，<code class="highlighter-rouge">Service</code>接口也继承了<code class="highlighter-rouge">Lifecycle</code>接口，表明它是有一定生命周期的。</p>

<h3 id="engine">Engine</h3>

<p>同样的在Tomcat中也定义了<code class="highlighter-rouge">Engine</code>接口，用<code class="highlighter-rouge">org.apache.catalina.core.StandardEngine</code>作为最终的实现类，类层次结构如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/standard_engine.png" alt="org.apache.catalina.core.StandardEngine" title="org.apache.catalina.core.StandardEngine" /></p>

<p>同样的<code class="highlighter-rouge">Engine</code>也是有一定生命周期的，所以<code class="highlighter-rouge">Engine</code>继承了<code class="highlighter-rouge">Lifecycle</code>接口。</p>

<h3 id="host">Host</h3>

<p>host代表一个虚拟主机，每个虚拟主机可以绑定一个域名和多个别名，Tomcat中使用<code class="highlighter-rouge">Host</code>接口代表一个host，最终的实现类是<code class="highlighter-rouge">org.apache.catalina.core.StandardHost</code>，类的结构层次如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/standard_host.png" alt="org.apache.catalina.core.StandardHost" title="org.apache.catalina.core.StandardHost" /></p>

<p>同样的我们可以看到，<code class="highlighter-rouge">Host</code>也继承了<code class="highlighter-rouge">Lifecycle</code>接口。</p>

<h3 id="context">Context</h3>

<p>最后一个容器是context，在Tomcat中用<code class="highlighter-rouge">Context</code>接口表示，它的默认实现是<code class="highlighter-rouge">org.apache.catalina.core.StandardContext</code>，类的结构层次如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/standard_context.png" alt="org.apache.catalina.core.StandardContext" title="org.apache.catalina.core.StandardContext" /></p>

<p><code class="highlighter-rouge">Context</code>也继承了<code class="highlighter-rouge">Lifecycle</code>。</p>

<h3 id="connector">Connector</h3>

<p>connector在Tomcat中并没有定义接口，而是直接使用实现类<code class="highlighter-rouge">org.apache.catalina.connector.Connector</code>来表示连接器，类的层次结构图如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/standard_connector.png" alt="org.apache.catalina.connector.Connector" title="org.apache.catalina.connector.Connector" /></p>

<p>这里我们依然可以看到，<code class="highlighter-rouge">org.apache.catalina.connector.Connector</code>也实现了<code class="highlighter-rouge">Lifecycle</code>接口。</p>

<h2 id="tomcat组件的生命周期">tomcat组件的生命周期</h2>

<p>从前面的类层次图我们可以知道，<code class="highlighter-rouge">org.apache.catalina.Lifecycle</code>是一个非常重要的接口，所有的组件和容器最终都实现了这个接口。实际上这个接口定义的是Tomcat中组件的生命周期，并且定义了每个生命周期的入口方法，同时，还定义了不同生命周期组件的不同状态，我们看一下这个接口定义的所有属性和方法：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/lifecycle.png" alt="org.apache.catalina.Lifecycle" title="org.apache.catalina.Lifecycle" /></p>

<p>从这个类我们可以看到，这里主要通过抽象方法定义了四个生命周期：</p>

<ul>
  <li>init() : 初始化</li>
  <li>start() : 启动阶段</li>
  <li>stop() : 停止阶段</li>
  <li>destory() : 销毁阶段</li>
</ul>

<p>因此所有的Tomcat组件生命周期都有这个四个阶段。</p>

<p>另外，我们可以看到这里有很多属性，这些属性表示的是组件在生命周期变化时触发的事件，组件完整的生命周期状态在<code class="highlighter-rouge">org.apache.catalina.LifecycleState</code>这个枚举类中定义，一共定义了14个状态：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/lifecycle_state.png" alt="org.apache.catalina.LifecycleState" title="org.apache.catalina.LifecycleState" /></p>

<p>实际上<code class="highlighter-rouge">MUST_STOP</code>和<code class="highlighter-rouge">MUST_DESTORY</code>这两个状态已经被废弃了，所以在整个生命周期中，只有12个状态。</p>

<p>这12个状态和生命周期有密切的关系，我们来看一下在四个生命周期中，这12个状态是如何变化的。</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/tomcat_state_transform.png" alt="tomcat的状态转换" title="tomcat的状态转换" /></p>

<p>从上图可以看出，四个生命周期变化的过程，伴随着12个状态的变化。</p>

<p>另外，我们需要特别注意，<code class="highlighter-rouge">org.apache.catalina.util.LifecycleBase</code>这个抽象类，它实现了<code class="highlighter-rouge">Lifecycle</code>的大部分方法，并且包装了一些抽象方法出来，这个类的结构图如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/tomcat_read_source/tomcat_struts/tomcat_lifecycle_base.png" alt="tomcat_lifecycle_base" title="tomcat_lifecycle_base" /></p>

<p>这里可以看到，<code class="highlighter-rouge">LifecycleBase</code>把四个生命周期的方法重新封装成<code class="highlighter-rouge">initInternal()</code>,<code class="highlighter-rouge">startInternal()</code>,<code class="highlighter-rouge">stopInternal()</code>,<code class="highlighter-rouge">destroyInternal()</code>四个抽象方法了，实际上，这个封装是为了统一实现生命周期中的状态控制，而不需要实现类自己去关心这个过程的状态变化。这是一个重要的抽象类，后边的章节经常会提到。</p>

<h2 id="container">Container</h2>

<p>除了声明生命周期的<code class="highlighter-rouge">Lifecycle</code>接口，我们还需要特别注意<code class="highlighter-rouge">Container</code>这个接口，<code class="highlighter-rouge">Context</code>、<code class="highlighter-rouge">Host</code>、<code class="highlighter-rouge">Engine</code>都继承了这个接口，这个接口有一个重要的方法，<code class="highlighter-rouge">public Pipeline getPipeline()</code>，这个方法是用来获取当前容器的管道对象的，实际上，tomcat在处理请求的时候，是通过一个管道来处理的，这个管道上可以配置多个阀门，处理请求的时候，请求的数据会经过所有阀门，zge正常处理请求会有四个阀门：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngineValve</span>
<span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardHostValve</span>
<span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardContextValve</span>
<span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardWrapperValve</span>
</code></pre></div></div>

<p>当然，出现错误也会使用错误处理阀门：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">valves</span><span class="o">.</span><span class="na">ErrorReportValve</span>
</code></pre></div></div>

<p>另外阀门也可以由我们自己在server.xml中配置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Valve</span> <span class="na">className=</span><span class="s">"org.apache.catalina.valves.AccessLogValve"</span> <span class="na">directory=</span><span class="s">"${catalina.base}/logs"</span>
               <span class="na">prefix=</span><span class="s">"localhost_access_log"</span> <span class="na">suffix=</span><span class="s">".txt"</span>
               <span class="na">pattern=</span><span class="s">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>这里需要我们理解管道和阀门的概念，在后边讲到请求处理时会真正用到。</p>

<h2 id="一次请求的过程">一次请求的过程</h2>

<p>我把tomcat中对一次请求的处理划分为如下几个阶段：</p>

<ul>
  <li>接收阶段：接收请求，将请求放入待处理队列</li>
  <li>协议解析阶段：根据请求协议解析请求，构造协议标准对象，并交给对应的Servlet</li>
  <li>请求处理阶段：Servlet处理请求</li>
  <li>结束阶段：servlet结束处理，tomcat结束本次请求</li>
</ul>

<h2 id="总结">总结</h2>

<p>读完本章，虽然我们目前还不是很了解tomcat的源码实现，不过大致上对tomcat的架构有了了解，这对我们后边理解tomcat的源码至关重要，后续的章节，我们将按照如下顺序来读源码：</p>

<ul>
  <li>tomcat的启动</li>
  <li>tomcat请求处理</li>
  <li>tomcat的停止</li>
</ul>

<p>由于请求交给servlet处理的过程是应用自己写的servlet，跟tomcat的源码无关，所以这个系列的博客不会提及。</p>

:ET
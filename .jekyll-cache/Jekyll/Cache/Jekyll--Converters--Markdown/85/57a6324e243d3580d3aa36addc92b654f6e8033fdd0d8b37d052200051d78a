I")*<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#解决方案" id="markdown-toc-解决方案">解决方案</a>    <ul>
      <li><a href="#保持应用服务器时间和数据库时间一致" id="markdown-toc-保持应用服务器时间和数据库时间一致">保持应用服务器时间和数据库时间一致</a>        <ul>
          <li><a href="#临时设置" id="markdown-toc-临时设置">临时设置</a></li>
          <li><a href="#配置文件设置" id="markdown-toc-配置文件设置">配置文件设置</a></li>
        </ul>
      </li>
      <li><a href="#客户端设置连接参数" id="markdown-toc-客户端设置连接参数">客户端设置连接参数</a></li>
    </ul>
  </li>
  <li><a href="#补充" id="markdown-toc-补充">补充</a>    <ul>
      <li><a href="#关于cst时区" id="markdown-toc-关于cst时区">关于CST时区</a></li>
    </ul>
  </li>
</ul>

<h2 id="前言">前言</h2>

<p>最近在做一个开放数据服务的时候，发现返回的数据格式化后由于时区问题导致客户端在解析时间时出现问题，比如如下数据：</p>

<p>数据库存储时间：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+----------+---------------------+
| username |updated_at           |
+---------+----------------------+
|  penghj  | 2020-02-21 12:05:29 |
+----------+---------------------+
</code></pre></div></div>

<p>由于数据库时区是<code class="highlighter-rouge">GTM+8</code>，但是程序服务器的时间是<code class="highlighter-rouge">UTC</code>，因此将数据库的<code class="highlighter-rouge">2020-02-21 12:05:29</code>当成UTC时区的时间了，最终格式化后得到如下json结果返回：</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"username"</span><span class="p">:</span><span class="w"> </span><span class="s2">"penghj"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"updatedAt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2020-02-21T12:05:29.000Z"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>这个时间格式是<code class="highlighter-rouge">yyyy-MM-dd'T'HH:mm:ss.SSS'Z'</code>，这是swagger标准定义的返回时间格式。这里的<code class="highlighter-rouge">Z</code>表示的是UTC时区。</p>

<p>客户端按照这个格式在解析时间时，转换为<code class="highlighter-rouge">GMT+8</code>时区的时间，最终客户端得到的时间如下：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2020-02-21 20:05:29.
</code></pre></div></div>

<p>我们发现，客户端得到的时间比实际时间早了8小时，这导致了客户端出现了一个未来的时间。</p>

<p>这个问题就是由于服务端时区和数据库时区不一致导致的。</p>

<h2 id="解决方案">解决方案</h2>

<p>解决这个问题的方式有很多种，这里列举几种。</p>

<h3 id="保持应用服务器时间和数据库时间一致">保持应用服务器时间和数据库时间一致</h3>

<p>这种方式最简单也最暴力，几乎没有后遗症，但是需要在一开始部署数据库服务和应用的时候就把时区全部配置好。</p>

<p>在配置mysql服务器时间前，可以先通过如下命令查看mysql服务时区：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; show variables like '%time_zone%';
+------------------+--------+
| Variable_name    | Value  |
+------------------+--------+
| system_time_zone | CST    |
| time_zone        | SYSTEM |
+------------------+--------+
</code></pre></div></div>

<p>这里可以看到mysql目前使用的时区是系统时区，系统的时区是<code class="highlighter-rouge">CST</code>。</p>

<p>mysql服务配置时区的方法有两种：</p>

<h4 id="临时设置">临时设置</h4>

<p>在mysql客户端执行如下命令：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; set global time_zone = '+08:00';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; set time_zone = '+08:00';
Query OK, 0 rows affected (0.00 sec)
</code></pre></div></div>

<p>这种方式虽然方便，但是mysql一旦重启就无效了。</p>

<h4 id="配置文件设置">配置文件设置</h4>

<p>修改配置文件<code class="highlighter-rouge">my.cnf</code>，在<code class="highlighter-rouge">[mysqld]</code>节下增加<code class="highlighter-rouge">default-time-zone = '+08:00'</code></p>

<p>这种方式修改需要重启mysql服务，建议在维护时间进行。</p>

<h3 id="客户端设置连接参数">客户端设置连接参数</h3>

<blockquote>
  <p>本人只在mysql 驱动5.1.48版本上测试了以下内容，其他版本请自行测试或者查看官方文档</p>
</blockquote>

<p>以JDBC连接为例，可以在jdbc url中设置连接参数，使程序读到的时间是按照mysql服务的时区转换为应用服务器的时区的结果。</p>

<p>比如数据库服务的时区为<code class="highlighter-rouge">GMT+8</code>，应用服务器的时区为<code class="highlighter-rouge">UTC</code>时，存储时间<code class="highlighter-rouge">2020-02-21 12:05:29</code>在应用中读到的时间就变成<code class="highlighter-rouge">2020-02-21 04:05:29</code>了。</p>

<p>一般情况下只需要在jdbc连接中加上<code class="highlighter-rouge">useTimezone=true</code>和<code class="highlighter-rouge">serverTimezone={serverTimezone}</code>即可，如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jdbc:mysql://mysqlserver:3306/database?useTimezone=true&amp;serverTimezone=UTC
</code></pre></div></div>

<p>这里假设MySQL服务端的时区是<code class="highlighter-rouge">UTC</code>时区，如果是东八区的话，可以设置为<code class="highlighter-rouge">GMT+8</code>，在jdbcUrl中得用Url编码：<code class="highlighter-rouge">GMT%2B8</code></p>

<p>在mysql中，还有其他jdbc连接跟时区相关的几个参数：</p>

<table>
  <thead>
    <tr>
      <th>属性说明</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>useTimezone</strong> <br />是否在客户端和服务端之间转换时间/日期类型的数据，<code class="highlighter-rouge">true</code>表示转换，<code class="highlighter-rouge">false</code>表示不转换，这是旧版本的遗留代码，因此这个属性只在<code class="highlighter-rouge">useLegacyDatetimeCode=true</code>的时候生效。<br />默认值： <code class="highlighter-rouge">false</code><br /><br /></td>
    </tr>
    <tr>
      <td><strong>serverTimezone</strong> <br />指定mysql服务的时区，当mysql服务的时区和应用时区不一致时指定，覆盖驱动自动检查的时区。<br /><br /></td>
    </tr>
    <tr>
      <td><strong>cacheDefaultTimezone</strong> <br />是否缓存客户端默认时区，这个缓存主要用于mysql数据的时区和客户端时区的转换，缓存可以提高性能，但是无法感知客户端时区的动态变化，客户端时区变化后得重新连接才能效。<br />默认值： <code class="highlighter-rouge">true</code><br /><br /></td>
    </tr>
    <tr>
      <td><strong>noTimezoneConversionForDateType</strong> <br />当<code class="highlighter-rouge">useTimezone'='true'</code>或者<code class="highlighter-rouge">useLegacyDatetimeCode'='false'</code>时，不使用服务器的时区来转换date类型的数据。<br />默认值： <code class="highlighter-rouge">true</code><br /><br /></td>
    </tr>
    <tr>
      <td><strong>noTimezoneConversionForTimeType</strong> <br />当<code class="highlighter-rouge">useTimezone'='true'</code>时，不使用服务器的时区来转换date类型的数据。<br />默认值: <code class="highlighter-rouge">false</code><br /><br /></td>
    </tr>
    <tr>
      <td><strong>useJDBCCompliantTimezoneShift</strong> <br />当JDBC连接包含<code class="highlighter-rouge">java.util.Calendar</code>参数类型时，是否使用JDBC兼容规则转换<code class="highlighter-rouge">TIME/TIMESTAMP/DATETIME</code>值的时区信息。<br />这是旧版驱动代码的功能，因此只有当<code class="highlighter-rouge">useLegacyDatetimeCode=true</code>的时候才生效。<br />默认值: <code class="highlighter-rouge">false</code><br /><br /></td>
    </tr>
    <tr>
      <td><strong>useLegacyDatetimeCode</strong> <br /><code class="highlighter-rouge">true</code>表示在服务端处理result set和statement中的<code class="highlighter-rouge">DATE/TIME/DATETIME/TIMESTAMP</code>这些类型的数据，从服务端时区转换为客户端时区后再返回给客户端。<code class="highlighter-rouge">false</code>表示不在服务端处理，直接返回结果给客户端，这是为了保持向后兼容旧版本的驱动。<br />当设置为<code class="highlighter-rouge">false</code>时，<code class="highlighter-rouge">useTimezone</code>,<code class="highlighter-rouge">useJDBCCompliantTimezoneShift</code>,<code class="highlighter-rouge">useGmtMillisForDatetimes</code>和<code class="highlighter-rouge">useFastDateParsing</code>的设置都会无效。<br />默认值： <code class="highlighter-rouge">true</code><br /><br /></td>
    </tr>
    <tr>
      <td><strong>useSSPSCompatibleTimezoneShift</strong> <br /><code class="highlighter-rouge">true</code>表示启用兼容模式，<code class="highlighter-rouge">false</code>表示不启用兼容模式。<br />这个兼容模式是指：<br />在发送<code class="highlighter-rouge">TIMESTAMP</code>类型的值到mysql服务端时，从一个使用服务器端预处理语句，并且配置属性<code class="highlighter-rouge">useJDBCCompliantTimeZoneShift</code>设置为<code class="highlighter-rouge">true</code>的MySQL环境中，迁移到不使用服务端预处理语句的MySQL环境中的兼容模式。<br />默认值： <code class="highlighter-rouge">false</code><br /></td>
    </tr>
  </tbody>
</table>

<h2 id="补充">补充</h2>

<h3 id="关于cst时区">关于CST时区</h3>

<p>名为CST的时区是一个很混乱的时区，有四种含义：</p>

<ul>
  <li>美国中部时间 Central Standard Time (USA) UTC-06:00</li>
  <li>澳大利亚中部时间 Central Standard Time (Australia) UTC+09:30</li>
  <li>中国标准时 China Standard Time UTC+08:00</li>
  <li>古巴标准时 Cuba Standard Time UTC-04:00</li>
</ul>

<p>因此强烈建议不要在任何环境中使用这个时区，以免引起歧义。</p>

:ET
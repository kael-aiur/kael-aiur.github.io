I"k,<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#原文转载" id="markdown-toc-原文转载">原文转载</a>    <ul>
      <li><a href="#特殊性" id="markdown-toc-特殊性">特殊性</a></li>
      <li><a href="#作用" id="markdown-toc-作用">作用</a>        <ul>
          <li><a href="#包注解" id="markdown-toc-包注解">包注解</a></li>
          <li><a href="#声明包常量" id="markdown-toc-声明包常量">声明包常量</a></li>
          <li><a href="#包文档" id="markdown-toc-包文档">包文档</a></li>
        </ul>
      </li>
      <li><a href="#相关问题" id="markdown-toc-相关问题">相关问题</a></li>
    </ul>
  </li>
</ul>

<h2 id="前言">前言</h2>

<p>经常在别的开源代码中看到<code class="highlighter-rouge">package-info.java</code>这个文件，以前一直以为只是个开发人员用来写文档的时候定义的一个文件而已，今天才知道原来是有官方标准规范的，所以特地查了一下用途，找到一篇写得比较不错的文章，转载一下吧。</p>

<p>原文连接：<a href="http://strong-life-126-com.iteye.com/blog/806246">http://strong-life-126-com.iteye.com/blog/806246</a></p>

<h2 id="原文转载">原文转载</h2>

<p>翻看以前的笔记，看到一个特殊的java文件：pacakge-info.java，虽然有记录，但是不全，就尝试着追踪一下该问题， 分享一下流水账式的结果。</p>

<h3 id="特殊性">特殊性</h3>

<p><strong>首先，它不能随便被创建</strong>。在Eclipse中， package-info文件不能随便被创建，会报“Type name is notvalid”错误，类名无效，Java变量定义规范是：字母、数字、下划线，还有那个不怎么常用的$符号（顺带说下，Java是支持中文名称的变量，习惯挑战的同学可以尝试下，分享一下这方面的经验），这个中划线可不再之列，那怎么创建这个文件呢？
很简单，用记事本创建一个，然后拷贝进去再改一下就成了，更直接的办法就是从别的项目中拷贝过来一个，这更方便。</p>

<p><strong>其次，服务的对象很特殊</strong>。一个类是一类或一组事物的描述，比如Dog这个类，就是描述旺财的，那package-info这个类是描述啥的呢？它总要有一个被描述或被陈述的对象，它是<strong>描述和记录本包信息</strong>。</p>

<p><strong>最后，类不能带有public、private访问权限</strong>。package-info.java再怎么特殊，也是一个类文件，也会被编译成package-info.class，但是在package-info.java中只能声明默认访问权限的类，也就是友好类。
其实还有几个特殊的地方，比如不可以继承，没有接口，没有类间关系（关联、组合、聚合等等）等。</p>

<h3 id="作用">作用</h3>

<p>这个文件的特殊性说完了，那再说说它有什么作用，它有三个作用：</p>

<ul>
  <li>为标注在包上Annotation提供便利；</li>
  <li>声明友好类和包常量；</li>
  <li>提供包的整体注释说明。</li>
</ul>

<p>我们来建立一个项目演示这三个作用，建立一个package-info的<strong>Java Project</strong>，在<code class="highlighter-rouge">com.company</code>包三个类:<code class="highlighter-rouge">package-info.java</code> 是我们重点关注的，<code class="highlighter-rouge">PkgAnnotation.java</code>是一个标注在包上的注解定义，<code class="highlighter-rouge">Client.java</code>模拟业务操作类。其结构如下图：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/java_package-info/package-info.java1.png" alt="工程目录" /></p>

<h4 id="包注解">包注解</h4>

<p>package-info.java为标注在包上Annotation提供便利。</p>

<p>首先定义一个包类型的注解，它只能放置的一个包上：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** 
 * 定义只能标注在package上的注解 
*/</span>  
<span class="nd">@Target</span><span class="o">(</span><span class="nc">ElementType</span><span class="o">.</span><span class="na">PACKAGE</span><span class="o">)</span>  
<span class="nd">@Retention</span><span class="o">(</span><span class="nc">RetentionPolicy</span><span class="o">.</span><span class="na">RUNTIME</span><span class="o">)</span>  
<span class="kd">public</span> <span class="nd">@interface</span> <span class="nc">PkgAnnotation</span> <span class="o">{</span>  
<span class="o">}</span>
</code></pre></div></div>

<p>再定义一个package-info类，这个是一个特殊的类，先看代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PkgAnnotation</span>  
<span class="kn">package</span> <span class="nn">com.company</span><span class="o">;</span>  
</code></pre></div></div>

<p>很简单，就这么个文件，里面啥都没有，就这两句话，没有class类，没有常变量声明。接着写一个模拟交易类，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Client</span> <span class="o">{</span>     
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>  
        <span class="c1">//可以通过I/O操作或配置项获得包名  </span>
        <span class="nc">String</span> <span class="n">pkgName</span> <span class="o">=</span> <span class="s">"com.company"</span><span class="o">;</span>       
        <span class="nc">Package</span> <span class="n">pkg</span> <span class="o">=</span> <span class="nc">Package</span><span class="o">.</span><span class="na">getPackage</span><span class="o">(</span><span class="n">pkgName</span><span class="o">);</span>  
        <span class="c1">//获得包上的注解  </span>
        <span class="nc">Annotation</span><span class="o">[]</span> <span class="n">annotations</span> <span class="o">=</span> <span class="n">pkg</span><span class="o">.</span><span class="na">getAnnotations</span><span class="o">();</span>  
        <span class="c1">//遍历注解数组  </span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Annotation</span> <span class="nl">an:</span><span class="n">annotations</span><span class="o">){</span>  
            <span class="k">if</span><span class="o">(</span><span class="n">an</span> <span class="k">instanceof</span> <span class="nc">PkgAnnotation</span><span class="o">){</span>  
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hi,I'm the PkgAnnotation ,which is be placed on package!"</span><span class="o">);</span>  
                <span class="cm">/* 
                 * 注解操作 
                 * MyAnnotation myAnn = (PkgAnnotation)an; 
                 * 还可以操作该注解包下的所有类，比如初始化，检查等等 
                 * 类似Struts的@Namespace，可以放到包名上，标明一个包的namespace路径 
                 */</span>           
            <span class="o">}</span>  
        <span class="o">}</span>  
    <span class="o">}</span>  
<span class="o">}</span>  
</code></pre></div></div>

<p>运行结果如下所示：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hi,I'm the PkgAnnotation ,which is be placed on package!
</code></pre></div></div>

<h4 id="声明包常量">声明包常量</h4>

<p>package-info.java可以用来声明友好类和包常量。</p>

<p>这个比较简单，而且很实用，比如一个包中有很多的内部访问的类或常量，就可以统一的放到package-info类中，这样就方便，而且集中管理，减少friendly类到处游走的情况，看例子：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PkgAnnotation</span>  
<span class="kn">package</span> <span class="nn">com.company</span><span class="o">;</span>  
 <span class="c1">//这里是包类，声明一个包使用的公共类，强调的是包访问权限  </span>
<span class="kd">class</span> <span class="nc">PkgClass</span><span class="o">{</span>  
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">(){</span>  
    <span class="o">}</span>  
<span class="o">}</span>  
<span class="c1">//包常量，只运行包内访问，适用于分“包”开发  </span>
<span class="kd">class</span> <span class="nc">PkgConst</span><span class="o">{</span>  
    <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">PACAKGE_CONST</span><span class="o">=</span><span class="s">"ABC"</span><span class="o">;</span>  
<span class="o">}</span>  
</code></pre></div></div>

<h4 id="包文档">包文档</h4>

<p>package-info.java可以提供包的整体注释说明。</p>

<p>如果是分“包”开发，也就是说一个包实现一个业务逻辑或功能点、或模块、或组件，则需要对一个包有很好的说明，说明这个包是干啥的，有啥作用，版本变迁，特别说明等等，如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** 
 * &lt;b&gt;package-info不是平常类，其作用有三个:&lt;/b&gt;&lt;br&gt; 
 * 1、为标注在包上Annotation提供便利；&lt;br&gt; 
 * 2、声明包的私有类和常量；&lt;br&gt; 
 * 3、提供包的整体注释说明。&lt;br&gt;  
*/</span>  
<span class="kn">package</span> <span class="nn">com.company</span><span class="o">;</span>  
</code></pre></div></div>

<p>通过javadoc生成的API文档如下：</p>

<p><img src="https://raw.githubusercontent.com/kael-aiur/image-repo1/master/java_package-info/package-info.java2.png" alt="生成文档" /></p>

<p>这与包下放置package.htm没啥区别，只是package-info可以更好的在代码中维护文档的完整性，并且可以实现代码与文档同步更新，package.htm也可以做到，不争论，建议是Java1.5以上版本都使用package-info.java来注释。</p>

<h3 id="相关问题">相关问题</h3>

<p>在项目开发中，可以放置在包上的常用注解有：Struts的<code class="highlighter-rouge">@namespace</code>、Hibernate的<code class="highlighter-rouge">@FilterDef</code>和<code class="highlighter-rouge">@TypeDef</code>等等。在包下，随便一个类中的包名前加这些注解，Eclipse会提示“Package annotations must be in file package-info.java”,在该包下建立<code class="highlighter-rouge">package-info.java</code>文件，把注解移到这里即可。
使用Checkstyle插件做代码检查时，会报一个警告“Missing package-info.java file.”也是这个package-info文件惹的祸，在各个包下创建一个即可。</p>
:ET
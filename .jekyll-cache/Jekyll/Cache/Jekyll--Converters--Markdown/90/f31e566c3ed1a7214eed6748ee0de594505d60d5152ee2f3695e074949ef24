I",<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#bootstrap" id="markdown-toc-bootstrap">Bootstrap</a>    <ul>
      <li><a href="#获取系统变量" id="markdown-toc-获取系统变量">获取系统变量</a></li>
      <li><a href="#初始化bootstrap" id="markdown-toc-初始化bootstrap">初始化Bootstrap</a></li>
      <li><a href="#启动tomcat" id="markdown-toc-启动tomcat">启动Tomcat</a>        <ul>
          <li><a href="#加载配置" id="markdown-toc-加载配置">加载配置</a></li>
          <li><a href="#启动应用" id="markdown-toc-启动应用">启动应用</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#catalina" id="markdown-toc-catalina">Catalina</a>    <ul>
      <li><a href="#load" id="markdown-toc-load">load()</a>        <ul>
          <li><a href="#解析配置" id="markdown-toc-解析配置">解析配置</a></li>
          <li><a href="#初始化服务器" id="markdown-toc-初始化服务器">初始化服务器</a></li>
        </ul>
      </li>
      <li><a href="#start" id="markdown-toc-start">start()</a>        <ul>
          <li><a href="#连接器的启动" id="markdown-toc-连接器的启动">连接器的启动</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
</ul>

<h2 id="前言">前言</h2>

<p>在上一节我们已经大致了解了tomcat的结构了，本节开始我们来看看tomcat的启动流程。</p>

<h2 id="bootstrap">Bootstrap</h2>

<p>在使用maven搭建环境的时候，我们最后运行了<code class="highlighter-rouge">org.apache.catalina.startup.Bootstrap</code>的main函数，并指定的启动参数：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-Dcatalina.home=target/classes/ 
-Dcatalina.base=target/classes/ 
-Djava.endorsed.dirs=${catalina.base}endorsed 
-Djava.io.tmpdir=${catalina.base}temp 
-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager 
-Djava.util.logging.config.file=${catalina.base}conf/logging.properties
</code></pre></div></div>

<p>这个类时候tomcat启动的入口类，我们先来看看这个类是如何启动tomcat的。</p>

<h3 id="获取系统变量">获取系统变量</h3>

<p>在<code class="highlighter-rouge">org.apache.catalina.startup.Bootstrap</code>这个类中，有一个静态初始化代码块，如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="o">{</span>
    
    <span class="nc">String</span> <span class="n">userDir</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"user.dir"</span><span class="o">);</span>

    <span class="nc">String</span> <span class="n">home</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="nc">Globals</span><span class="o">.</span><span class="na">CATALINA_HOME_PROP</span><span class="o">);</span>
    <span class="nc">File</span> <span class="n">homeFile</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="c1">// ... 省略计算文件路径的代码</span>

    <span class="n">catalinaHomeFile</span> <span class="o">=</span> <span class="n">homeFile</span><span class="o">;</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span>
            <span class="nc">Globals</span><span class="o">.</span><span class="na">CATALINA_HOME_PROP</span><span class="o">,</span> <span class="n">catalinaHomeFile</span><span class="o">.</span><span class="na">getPath</span><span class="o">());</span>

    <span class="nc">String</span> <span class="n">base</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="nc">Globals</span><span class="o">.</span><span class="na">CATALINA_BASE_PROP</span><span class="o">);</span>
    
    <span class="c1">// ... 省略计算文件路径的代码</span>
    
    <span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span>
            <span class="nc">Globals</span><span class="o">.</span><span class="na">CATALINA_BASE_PROP</span><span class="o">,</span> <span class="n">catalinaBaseFile</span><span class="o">.</span><span class="na">getPath</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里的代码我们省略了大部分关于文件路径的计算，这些代码主要是根据系统变量计算最终的两个关键系统变量的：</p>

<ul>
  <li><code class="highlighter-rouge">catalinaHomeFile</code>：tomcat应用的根目录</li>
  <li><code class="highlighter-rouge">catalinaBaseFile</code>：tomcat配置的根目录</li>
</ul>

<p>一般来说，最终计算的结果都是<code class="highlighter-rouge">catalinaHomeFile=catalinaBaseFile=tomcat的根目录</code>，这里的计算也涉及我们传入的启动参数，所以设置启动参数真正的目的就是告诉tomcat最后的配置文件和启动目录在哪里，这个过程我们不做深入解释，有兴趣的同学可以自己读一下源码。</p>

<h3 id="初始化bootstrap">初始化Bootstrap</h3>

<p>静态初始化完成之后，在main中，第一步是初始化Bootstrap类，代码如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">daemon</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Bootstrap</span> <span class="n">bootstrap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bootstrap</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 【1】 初始化</span>
        <span class="n">bootstrap</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">daemon</span> <span class="o">=</span> <span class="n">bootstrap</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">daemon</span><span class="o">.</span><span class="na">catalinaLoader</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这部门我们可以看到，在注释【1】的位置，对Bootstrap进行了初始化，我们来看一下这个初始化的过程：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="c1">// 【1】初始化类加载器</span>
    <span class="n">initClassLoaders</span><span class="o">();</span>

    <span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">catalinaLoader</span><span class="o">);</span>

    <span class="nc">SecurityClassLoad</span><span class="o">.</span><span class="na">securityClassLoad</span><span class="o">(</span><span class="n">catalinaLoader</span><span class="o">);</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"Loading startup class"</span><span class="o">);</span>
        
    <span class="c1">// 【2】加载启动类</span>
    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">startupClass</span> <span class="o">=</span>
        <span class="n">catalinaLoader</span><span class="o">.</span><span class="na">loadClass</span>
        <span class="o">(</span><span class="s">"org.apache.catalina.startup.Catalina"</span><span class="o">);</span>
    <span class="nc">Object</span> <span class="n">startupInstance</span> <span class="o">=</span> <span class="n">startupClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"Setting startup class properties"</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">methodName</span> <span class="o">=</span> <span class="s">"setParentClassLoader"</span><span class="o">;</span>
    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">paramTypes</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
    <span class="n">paramTypes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">"java.lang.ClassLoader"</span><span class="o">);</span>
    <span class="nc">Object</span> <span class="n">paramValues</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
    <span class="n">paramValues</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">sharedLoader</span><span class="o">;</span>
    <span class="c1">// 【3】设置启动类的父类加载器</span>
    <span class="nc">Method</span> <span class="n">method</span> <span class="o">=</span>
        <span class="n">startupInstance</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="n">methodName</span><span class="o">,</span> <span class="n">paramTypes</span><span class="o">);</span>
    <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">startupInstance</span><span class="o">,</span> <span class="n">paramValues</span><span class="o">);</span>

    <span class="n">catalinaDaemon</span> <span class="o">=</span> <span class="n">startupInstance</span><span class="o">;</span>

<span class="o">}</span>
</code></pre></div></div>

<p>初始化的过程一共做了三件事：</p>

<ul>
  <li>初始化类加载器</li>
  <li>加载启动类(<code class="highlighter-rouge">org.apache.catalina.startup.Catalina</code>)</li>
  <li>设置启动类的父类加载器</li>
</ul>

<p>这三件事分别在代码中的【1】【2】【3】标注了。</p>

<p>其中类加载器一共初始化了三个类加载器：</p>

<ul>
  <li>commonLoader：公共类加载器，是所有类的默认加载器</li>
  <li>catalinaLoader：catalina加载器，用于加载catalina类</li>
  <li>sharedLoader：分享加载器，在catalina启动后用来加载其他类的加载器</li>
</ul>

<p>实际上默认情况下使用的加载器都是commonLoader，但是我们可以用系统变量指定<code class="highlighter-rouge">catalinaLoader</code>和<code class="highlighter-rouge">sharedLoader</code>使用其他的类加载器。</p>

<p>加载启动类实际上是加载<code class="highlighter-rouge">org.apache.catalina.startup.Catalina</code>这个类。</p>

<p>设置启动类的父类加载器实际上就是设置Catalina内部使用的类加载器。</p>

<h3 id="启动tomcat">启动Tomcat</h3>

<p>Bootstrap初始化完成之后，就会根据当前传入的启动参数决定做什么事情，默认情况不传入启动参数的话，就是<code class="highlighter-rouge">start</code>，经过一系列的判断之后，启动执行如下语句：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 省略其他判断
} else if (command.equals("start")) {
    daemon.setAwait(true);
    // 【1】加载配置
    daemon.load(args);
    // 【2】启动应用
    daemon.start();
}
</code></pre></div></div>

<p>注意，这里的<code class="highlighter-rouge">daemon</code>对象其实就是<code class="highlighter-rouge">bootstrap</code>对象。</p>

<p>这里启动的时候做了两件事：</p>

<ul>
  <li>加载配置</li>
  <li>启动应用</li>
</ul>

<h4 id="加载配置">加载配置</h4>

<p>我们来看看Bootstrap如何做的：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">load</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">arguments</span><span class="o">)</span>
    <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

    <span class="c1">// Call the load() method</span>
    <span class="nc">String</span> <span class="n">methodName</span> <span class="o">=</span> <span class="s">"load"</span><span class="o">;</span>
    <span class="nc">Object</span> <span class="n">param</span><span class="o">[];</span>
    <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">paramTypes</span><span class="o">[];</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">arguments</span><span class="o">==</span><span class="kc">null</span> <span class="o">||</span> <span class="n">arguments</span><span class="o">.</span><span class="na">length</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">paramTypes</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">param</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">paramTypes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Class</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">paramTypes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
        <span class="n">param</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="n">param</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">arguments</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// 【2】使用反射调用Catalina的load方法</span>
    <span class="nc">Method</span> <span class="n">method</span> <span class="o">=</span>
        <span class="n">catalinaDaemon</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="n">methodName</span><span class="o">,</span> <span class="n">paramTypes</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"Calling startup class "</span> <span class="o">+</span> <span class="n">method</span><span class="o">);</span>
    <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">catalinaDaemon</span><span class="o">,</span> <span class="n">param</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<p>这里的逻辑很好理解，实际上是使用反射调用了Catalina的<code class="highlighter-rouge">load</code>方法，这个方法我们后边再说。</p>

<h4 id="启动应用">启动应用</h4>

<p>接下里看看Bootstrap如何启动应用：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span>
    <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">if</span><span class="o">(</span> <span class="n">catalinaDaemon</span><span class="o">==</span><span class="kc">null</span> <span class="o">)</span> <span class="n">init</span><span class="o">();</span>
    <span class="c1">// 【1】使用反射调用Catalina的start方法</span>
    <span class="nc">Method</span> <span class="n">method</span> <span class="o">=</span> <span class="n">catalinaDaemon</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="s">"start"</span><span class="o">,</span> <span class="o">(</span><span class="nc">Class</span> <span class="o">[]</span> <span class="o">)</span><span class="kc">null</span><span class="o">);</span>
    <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">catalinaDaemon</span><span class="o">,</span> <span class="o">(</span><span class="nc">Object</span> <span class="o">[])</span><span class="kc">null</span><span class="o">);</span>

<span class="o">}</span>
</code></pre></div></div>

<p>这里的逻辑也很简单，只是使用反射调用了Catalin的<code class="highlighter-rouge">start</code>方法。</p>

<p>到这里我们可以看出，Bootstrap这个类其实并没有做太多真正的应用有关的事情，它的作用是把Catalina启动起来，实际上类似于我们操作系统的启动引导程序，而真正的操作系统是Catalina</p>

<h2 id="catalina">Catalina</h2>

<p>现在我们可以来看看Catalina是如何启动的。</p>

<p>在Bootstrap中我们可以看到，Catalina的启动分两步，<code class="highlighter-rouge">load</code>和<code class="highlighter-rouge">start</code>。</p>

<h3 id="load">load()</h3>

<p>先看第一步，加载配置。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">load</span><span class="o">()</span> <span class="o">{</span>

    <span class="kt">long</span> <span class="n">t1</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
    <span class="c1">// 【1】初始化系统变量</span>
    <span class="n">initDirs</span><span class="o">();</span>
    <span class="n">initNaming</span><span class="o">();</span>
    
    <span class="c1">// 【2】创建配置解析器</span>
    <span class="nc">Digester</span> <span class="n">digester</span> <span class="o">=</span> <span class="n">createStartDigester</span><span class="o">();</span>

    <span class="nc">InputSource</span> <span class="n">inputSource</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="nc">File</span> <span class="n">file</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
        
        <span class="c1">// ... 省略配置文件对象构造过程</span>
        
        <span class="c1">// 【3】解析配置</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">inputSource</span><span class="o">.</span><span class="na">setByteStream</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
            <span class="n">digester</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
            <span class="n">digester</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">inputSource</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SAXParseException</span> <span class="n">spe</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"Catalina.start using "</span> <span class="o">+</span> <span class="n">getConfigFile</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span>
                    <span class="n">spe</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">"Catalina.start using "</span> <span class="o">+</span> <span class="n">getConfigFile</span><span class="o">()</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">,</span> <span class="n">e</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">inputStream</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">inputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// Ignore</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">getServer</span><span class="o">().</span><span class="na">setCatalina</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="n">getServer</span><span class="o">().</span><span class="na">setCatalinaHome</span><span class="o">(</span><span class="nc">Bootstrap</span><span class="o">.</span><span class="na">getCatalinaHomeFile</span><span class="o">());</span>
    <span class="n">getServer</span><span class="o">().</span><span class="na">setCatalinaBase</span><span class="o">(</span><span class="nc">Bootstrap</span><span class="o">.</span><span class="na">getCatalinaBaseFile</span><span class="o">());</span>

    <span class="n">initStreams</span><span class="o">();</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 【4】初始化服务器</span>
        <span class="n">getServer</span><span class="o">().</span><span class="na">init</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">LifecycleException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="nc">Boolean</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Error</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"Catalina.start"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c1">// ... 省略无关代码</span>
<span class="o">}</span>
</code></pre></div></div>

<p>上面的代码省略了很多不影响我们理解启动过程的代码，有兴趣的同学自行阅读。</p>

<p>在加载配置的过程，主要做了几件事情：</p>

<ul>
  <li>初始化相关的系统参数</li>
  <li>创建配置解析器</li>
  <li>解析配置</li>
  <li>初始化服务器</li>
</ul>

<p>初始化相关的系统参数，主要是初始化临时文件目录以及启动过程需要的一些系统变量，然后创建一个配置解析器来解析配置，最后初始化服务器。</p>

<p>这里我们暂时不关系各个环节具体的细节，因为这不影响我们理解tomcat的启动。我们只需要了解两个关键的问题即可。</p>

<h4 id="解析配置">解析配置</h4>

<p>解析配置的过程，实际上就是解析<code class="highlighter-rouge">server.xml</code>的过程，这个过程根据解析的结果，创建了前面我们提到的<code class="highlighter-rouge">Server</code>、<code class="highlighter-rouge">Service</code>、<code class="highlighter-rouge">Engine</code>、<code class="highlighter-rouge">Host</code>、<code class="highlighter-rouge">Context</code>的所有对象并关联了他们之间的关系。</p>

<p>具体的解析细节我们这里也不做深入的讨论，因为讨论起来的篇幅可能会比较长，而且也不难理解，有兴趣的同学自己看一下代码即可。</p>

<h4 id="初始化服务器">初始化服务器</h4>

<p>从这一步开始，其实就已经进入到前面我们提到的Tomcat组件的生命周期的初始化阶段了，在<code class="highlighter-rouge">LifecycleBase</code>类中，封装了生命周期的状态变化，现在我们来看一下这部分代码：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kd">final</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">NEW</span><span class="o">))</span> <span class="o">{</span>
        <span class="n">invalidTransition</span><span class="o">(</span><span class="nc">Lifecycle</span><span class="o">.</span><span class="na">BEFORE_INIT_EVENT</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">setStateInternal</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">INITIALIZING</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="c1">// 【1】执行具体实现类的初始化方法</span>
        <span class="n">initInternal</span><span class="o">();</span>
        <span class="n">setStateInternal</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">INITIALIZED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
        <span class="n">setStateInternal</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span>
                <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"lifecycleBase.initFail"</span><span class="o">,</span><span class="n">toString</span><span class="o">()),</span> <span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里我们可以看出，除了维护组件的生命周期状态以外，并没有做其他事情，真正的初始化任务是由子类去完成的，Tomcat服务的默认实现是<code class="highlighter-rouge">StandardServer</code>，我们来看一下它的具体实现：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>

    <span class="kd">super</span><span class="o">.</span><span class="na">initInternal</span><span class="o">();</span>
    <span class="c1">// 【1】设置全局缓存和元对象</span>
    <span class="n">onameStringCache</span> <span class="o">=</span> <span class="n">register</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringCache</span><span class="o">(),</span> <span class="s">"type=StringCache"</span><span class="o">);</span>

    <span class="nc">MBeanFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MBeanFactory</span><span class="o">();</span>
    <span class="n">factory</span><span class="o">.</span><span class="na">setContainer</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="n">onameMBeanFactory</span> <span class="o">=</span> <span class="n">register</span><span class="o">(</span><span class="n">factory</span><span class="o">,</span> <span class="s">"type=MBeanFactory"</span><span class="o">);</span>
    <span class="c1">// 【2】初始化全局命名资源</span>
    <span class="n">globalNamingResources</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
    <span class="c1">// 【3】加载全局系统资源</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">getCatalina</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ClassLoader</span> <span class="n">cl</span> <span class="o">=</span> <span class="n">getCatalina</span><span class="o">().</span><span class="na">getParentClassLoader</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">cl</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cl</span> <span class="o">!=</span> <span class="nc">ClassLoader</span><span class="o">.</span><span class="na">getSystemClassLoader</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">cl</span> <span class="k">instanceof</span> <span class="nc">URLClassLoader</span><span class="o">)</span> <span class="o">{</span>
                <span class="no">URL</span><span class="o">[]</span> <span class="n">urls</span> <span class="o">=</span> <span class="o">((</span><span class="nc">URLClassLoader</span><span class="o">)</span> <span class="n">cl</span><span class="o">).</span><span class="na">getURLs</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="no">URL</span> <span class="n">url</span> <span class="o">:</span> <span class="n">urls</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">getProtocol</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"file"</span><span class="o">))</span> <span class="o">{</span>
                        <span class="k">try</span> <span class="o">{</span>
                            <span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span> <span class="o">(</span><span class="n">url</span><span class="o">.</span><span class="na">toURI</span><span class="o">());</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">isFile</span><span class="o">()</span> <span class="o">&amp;&amp;</span>
                                    <span class="n">f</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">".jar"</span><span class="o">))</span> <span class="o">{</span>
                                <span class="nc">ExtensionValidator</span><span class="o">.</span><span class="na">addSystemResource</span><span class="o">(</span><span class="n">f</span><span class="o">);</span>
                            <span class="o">}</span>
                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">URISyntaxException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c1">// Ignore</span>
                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                            <span class="c1">// Ignore</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">cl</span> <span class="o">=</span> <span class="n">cl</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 【4】初始化所有Serrvice</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">services</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
        <span class="n">services</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">init</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里关于全局缓存和元对象的作用，我暂时也没弄明白，不过这不影响我们理解tomcat的初始化。
初始化全局命名资源，要是初始化server.xml中配置的全局命名资源，如数据库连接池，线程池等。
加载全局系统资源，主要是把所有类加载器能搜索到的jar包全部设置为系统资源。
最后把当前server所持有的全部service都初始化了。</p>

<p>这里我们可以看到，Server除了自身的初始化，实际上还往下调用了自己的内部对象初始化，就是service，我们来看下service的初始化，tomcat的service默认实现是<code class="highlighter-rouge">StandardService</code>:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>

    <span class="kd">super</span><span class="o">.</span><span class="na">initInternal</span><span class="o">();</span>
    <span class="c1">// 【1】初始化容器(Engine)</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">container</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">container</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="c1">// 【2】初始化连接池</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Executor</span> <span class="n">executor</span> <span class="o">:</span> <span class="n">findExecutors</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">executor</span> <span class="k">instanceof</span> <span class="nc">JmxEnabled</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">((</span><span class="nc">JmxEnabled</span><span class="o">)</span> <span class="n">executor</span><span class="o">).</span><span class="na">setDomain</span><span class="o">(</span><span class="n">getDomain</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">executor</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c1">// 【3】初始化监听器</span>
    <span class="n">mapperListener</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>

    <span class="c1">// 【4】初始化连接器</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectorsLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Connector</span> <span class="n">connector</span> <span class="o">:</span> <span class="n">connectors</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">connector</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
                        <span class="s">"standardService.connector.initFailed"</span><span class="o">,</span> <span class="n">connector</span><span class="o">);</span>
                <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>

                <span class="k">if</span> <span class="o">(</span><span class="nc">Boolean</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">"org.apache.catalina.startup.EXIT_ON_INIT_FAILURE"</span><span class="o">))</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里我们可以看到，service一共做了4件事情：</p>

<ul>
  <li>初始化自己的容器(Engine)</li>
  <li>初始化连接池</li>
  <li>初始化监听器</li>
  <li>初始化连接器</li>
</ul>

<blockquote>
  <p><strong>注：</strong> 前面我们从tomcat的架构中已经知道，service和engine是一对一的关系，这里的container实际上就是Engine，它的实现类是<code class="highlighter-rouge">StandardEngine</code>。</p>
</blockquote>

<p>从这里我们可以看到，tomcat的初始化过程，实际上是从顶层容器一层一层往下调用持有对象的初始化方法来实现的。</p>

<p>其实不仅仅是初始化过程，tomcat中所有生命周期的过程都是一样的，从顶层开始往下逐层调用来完成整个生命周期的。</p>

<p>到这里我们就不在往下看每个容器的初始化过程了，逻辑比较简单，有兴趣的同学继续往下看即可。</p>

<h3 id="start">start()</h3>

<p>接下来我们来看一下Catalina的start方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>

    <span class="c1">// ... 省略一些校验代码</span>
    
    <span class="c1">// 【1】启动服务</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">getServer</span><span class="o">().</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">LifecycleException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">fatal</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"catalina.serverStartFail"</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">getServer</span><span class="o">().</span><span class="na">destroy</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">LifecycleException</span> <span class="n">e1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"destroy() failed for failed Server "</span><span class="o">,</span> <span class="n">e1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">long</span> <span class="n">t2</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
    <span class="k">if</span><span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isInfoEnabled</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Server startup in "</span> <span class="o">+</span> <span class="o">((</span><span class="n">t2</span> <span class="o">-</span> <span class="n">t1</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1000000</span><span class="o">)</span> <span class="o">+</span> <span class="s">" ms"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 【2】创建停止tomcat的钩子</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">useShutdownHook</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">shutdownHook</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">shutdownHook</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CatalinaShutdownHook</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="nc">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="n">shutdownHook</span><span class="o">);</span>

        <span class="nc">LogManager</span> <span class="n">logManager</span> <span class="o">=</span> <span class="nc">LogManager</span><span class="o">.</span><span class="na">getLogManager</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">logManager</span> <span class="k">instanceof</span> <span class="nc">ClassLoaderLogManager</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">((</span><span class="nc">ClassLoaderLogManager</span><span class="o">)</span> <span class="n">logManager</span><span class="o">).</span><span class="na">setUseShutdownHook</span><span class="o">(</span>
                    <span class="kc">false</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 【3】阻塞线程</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">await</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">await</span><span class="o">();</span>
        <span class="n">stop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Catalina的启动也比较简单，只是把Server启动起来，然后创建钩子等待停止tomcat的通知，最后阻塞线程，然后服务器开始等待请求。</p>

<p>因此主要的初始化任务在<code class="highlighter-rouge">StandardServer</code>中，我们看一下Server的启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>

    <span class="n">fireLifecycleEvent</span><span class="o">(</span><span class="no">CONFIGURE_START_EVENT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="n">setState</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">);</span>

    <span class="n">globalNamingResources</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

    <span class="c1">// Start our defined Services</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">servicesLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">services</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">services</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Server的启动逻辑也比较简单，和初始化逻辑一样逐层往下调用，我们再看一下Service的启动：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>

    <span class="k">if</span><span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isInfoEnabled</span><span class="o">())</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"standardService.start.name"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">));</span>
    <span class="n">setState</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">);</span>
    
    <span class="c1">// 【1】启动容器</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">container</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">container</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">container</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 【2】启动线程池</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">executors</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Executor</span> <span class="nl">executor:</span> <span class="n">executors</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">executor</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="c1">// 【3】映射监听器</span>
    <span class="n">mapperListener</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

    <span class="c1">// 【4】启动连接器</span>
    <span class="kd">synchronized</span> <span class="o">(</span><span class="n">connectorsLock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Connector</span> <span class="nl">connector:</span> <span class="n">connectors</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// If it has already failed, don't try and start it</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">connector</span><span class="o">.</span><span class="na">getState</span><span class="o">()</span> <span class="o">!=</span> <span class="nc">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">connector</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
                        <span class="s">"standardService.connector.startFailed"</span><span class="o">,</span>
                        <span class="n">connector</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>启动过程和初始化过程基本一致，主要启动了四个组件：</p>

<ul>
  <li>启动容器</li>
  <li>启动线程池</li>
  <li>启动映射监听器</li>
  <li>启动连接器</li>
</ul>

<p>这里我们不把所有组件的启动全部看完，我们只看连接器的启动，因为这个和我们下一节讲的接收请求关系密切。</p>

<h4 id="连接器的启动">连接器的启动</h4>

<p>连接器的启动其实依赖于我们在xml中的配置，默认情况下，tomcat有如下两段配置：</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">"8080"</span> <span class="na">protocol=</span><span class="s">"HTTP/1.1"</span>
               <span class="na">connectionTimeout=</span><span class="s">"20000"</span>
               <span class="na">redirectPort=</span><span class="s">"8443"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">"8009"</span> <span class="na">protocol=</span><span class="s">"AJP/1.3"</span> <span class="na">redirectPort=</span><span class="s">"8443"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<p>这个决定了我们启动的时候有两个连接器，由于AJP的连接器我们很少用到，这里我们以HTTP连接器的启动为例来分析。</p>

<p>Connector的<code class="highlighter-rouge">start</code>方法实现如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">LifecycleException</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">getPort</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
                <span class="s">"coyoteConnector.invalidPort"</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getPort</span><span class="o">())));</span>
    <span class="o">}</span>
    <span class="n">setState</span><span class="o">(</span><span class="nc">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">);</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="c1">// 【1】启动协议处理器</span>
        <span class="n">protocolHandler</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">errPrefix</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">errPrefix</span> <span class="o">+=</span> <span class="s">"service.getName(): \""</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\"; "</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span>
            <span class="o">(</span><span class="n">errPrefix</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">sm</span><span class="o">.</span><span class="na">getString</span>
             <span class="o">(</span><span class="s">"coyoteConnector.protocolHandlerStartFailed"</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>这里我们可以看到，connector对象实际上是持有一个协议处理器，并且启动的时候调用了协议处理器的启动方法，这个协议处理器才是真正处理各种协议的对象，connector相当于它的代理类。</p>

<p>默认情况下，http协议连接器使用的协议处理器是<code class="highlighter-rouge">org.apache.coyote.http11.Http11NioProtocol</code>这个实现类，我们看一下这个处理器的启动方法：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">getLog</span><span class="o">().</span><span class="na">isInfoEnabled</span><span class="o">())</span>
        <span class="n">getLog</span><span class="o">().</span><span class="na">info</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"abstractProtocolHandler.start"</span><span class="o">,</span>
                <span class="n">getName</span><span class="o">()));</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">endpoint</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">getLog</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"abstractProtocolHandler.startError"</span><span class="o">,</span>
                <span class="n">getName</span><span class="o">()),</span> <span class="n">ex</span><span class="o">);</span>
        <span class="k">throw</span> <span class="n">ex</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>协议处理器实际上也是调用enpoint对象的<code class="highlighter-rouge">start()</code>方法，其实就是启动入口对象，目前tomcat一共有四种入口对象：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">NioEndpoint</span>
<span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">Nio2Endpoint</span>
<span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">AprEndpoint</span>
<span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span>
</code></pre></div></div>

<p>关于这四种协议我目前也不算特别了解，可能后续需要单独的章节来讨论，这里我们只看默认的http协议入口：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">NioEndpoint</span>
</code></pre></div></div>

<p>这个协议入口的启动方法如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>

    <span class="k">if</span> <span class="o">(!</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">paused</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="n">processorCache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SynchronizedStack</span><span class="o">&lt;&gt;(</span><span class="nc">SynchronizedStack</span><span class="o">.</span><span class="na">DEFAULT_SIZE</span><span class="o">,</span>
                <span class="n">socketProperties</span><span class="o">.</span><span class="na">getProcessorCache</span><span class="o">());</span>
        <span class="n">eventCache</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SynchronizedStack</span><span class="o">&lt;&gt;(</span><span class="nc">SynchronizedStack</span><span class="o">.</span><span class="na">DEFAULT_SIZE</span><span class="o">,</span>
                        <span class="n">socketProperties</span><span class="o">.</span><span class="na">getEventCache</span><span class="o">());</span>
        <span class="n">nioChannels</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SynchronizedStack</span><span class="o">&lt;&gt;(</span><span class="nc">SynchronizedStack</span><span class="o">.</span><span class="na">DEFAULT_SIZE</span><span class="o">,</span>
                <span class="n">socketProperties</span><span class="o">.</span><span class="na">getBufferPool</span><span class="o">());</span>
        <span class="c1">// 【1】创建线程池</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">getExecutor</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">createExecutor</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">initializeConnectionLatch</span><span class="o">();</span>

        <span class="c1">// 【2】启动辨识线程</span>
        <span class="n">pollers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Poller</span><span class="o">[</span><span class="n">getPollerThreadCount</span><span class="o">()];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">pollers</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">pollers</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Poller</span><span class="o">();</span>
            <span class="nc">Thread</span> <span class="n">pollerThread</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thread</span><span class="o">(</span><span class="n">pollers</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"-ClientPoller-"</span><span class="o">+</span><span class="n">i</span><span class="o">);</span>
            <span class="n">pollerThread</span><span class="o">.</span><span class="na">setPriority</span><span class="o">(</span><span class="n">threadPriority</span><span class="o">);</span>
            <span class="n">pollerThread</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">pollerThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="c1">// 【3】启动接收器线程</span>
        <span class="n">startAcceptorThreads</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p><strong>注：</strong> 虽然协议处理器调用的是协议入口的start方法，这个方法实际上在协议入口的抽象类<code class="highlighter-rouge">org.apache.tomcat.util.net.AbstractEndpoint</code>中实现了，并且内部调用了<code class="highlighter-rouge">startInternal</code>这个方法，所以具体的入口实现类需要实现的是<code class="highlighter-rouge">startInternal</code>这个方法。</p>
</blockquote>

<p>协议入口的启动主要做了三件事：</p>

<ul>
  <li>创建一个线程池并启动它</li>
  <li>启动一个辨识线程</li>
  <li>启动接收器线程</li>
</ul>

<p>接收器线程的任务是接收请求，并把请求放到请求队列中等待响应，辨识线程的作用是从请求队列中取出请求，并把它交给应用处理，这两个线程是我们下节讨论tomcat接收请求的重点。</p>

<p>到这里之后，整个tomcat服务就已经启动完成，接下来就是等待请求了。</p>

<h2 id="总结">总结</h2>

<p>本章我们已经看到了tomcat是如何启动的，这个过程的介绍比较简单，限于篇幅，我并没有详细介绍tomcat如何往下加载context，这部分的内容实际上是在配置解析的过程做的，这个过程目前并没有计划再哪一章节讨论，可能会需要独立一个章节来讨论，有兴趣的同学自己先读一下源码吧。</p>
:ET
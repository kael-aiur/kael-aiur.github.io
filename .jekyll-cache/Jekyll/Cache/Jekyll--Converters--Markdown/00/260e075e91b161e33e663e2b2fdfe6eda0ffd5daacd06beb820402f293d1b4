I"Og<ul id="markdown-toc">
  <li><a href="#前言" id="markdown-toc-前言">前言</a></li>
  <li><a href="#java8为什么开发新的时间包" id="markdown-toc-java8为什么开发新的时间包">java8为什么开发新的时间包</a></li>
  <li><a href="#设计思想" id="markdown-toc-设计思想">设计思想</a></li>
  <li><a href="#两个关键的类" id="markdown-toc-两个关键的类">两个关键的类</a></li>
  <li><a href="#创建日期对象" id="markdown-toc-创建日期对象">创建日期对象</a>    <ul>
      <li><a href="#创建新的对象" id="markdown-toc-创建新的对象">创建新的对象</a></li>
      <li><a href="#通过特定计算创建日期对象" id="markdown-toc-通过特定计算创建日期对象">通过特定计算创建日期对象</a></li>
      <li><a href="#通过适配器创建日期对象" id="markdown-toc-通过适配器创建日期对象">通过适配器创建日期对象</a></li>
      <li><a href="#获取精确的时间对象" id="markdown-toc-获取精确的时间对象">获取精确的时间对象</a></li>
      <li><a href="#获取属性的接口" id="markdown-toc-获取属性的接口">获取属性的接口</a></li>
    </ul>
  </li>
  <li><a href="#时区的概念time-zone" id="markdown-toc-时区的概念time-zone">时区的概念(Time Zone)</a>    <ul>
      <li><a href="#新类库中的时区类" id="markdown-toc-新类库中的时区类">新类库中的时区类</a>        <ul>
          <li><a href="#zoneddatetime-" id="markdown-toc-zoneddatetime-"><code class="highlighter-rouge">ZonedDateTime </code></a></li>
          <li><a href="#offsetdatetime" id="markdown-toc-offsetdatetime"><code class="highlighter-rouge">OffsetDateTime</code></a></li>
          <li><a href="#javatimeperiod" id="markdown-toc-javatimeperiod"><code class="highlighter-rouge">java.time.Period</code></a></li>
          <li><a href="#javatimeduration" id="markdown-toc-javatimeduration"><code class="highlighter-rouge">java.time.Duration</code></a></li>
          <li><a href="#年表chronologies" id="markdown-toc-年表chronologies">年表(Chronologies)</a></li>
          <li><a href="#公用类" id="markdown-toc-公用类">公用类</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
</ul>

<h2 id="前言">前言</h2>

<p>用java8已经有好一段时间了，不少新特性都已经使用过了，唯独还没用过java8中新的时间包，今天写代码的时候正好需要涉及到时间，那就来研究一下java8中新的时间包(java.time)吧，本博客参考的内容来自Oracle官网，连接如下：</p>

<p><a href="http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html">http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html</a></p>

<h2 id="java8为什么开发新的时间包">java8为什么开发新的时间包</h2>

<p>其实追溯起来，jdk中关于时间的处理工具已经经过两个时代了，最早的<code class="highlighter-rouge">java.util.Date</code>到后来出现的<code class="highlighter-rouge">java.util.Canlendar</code>类，都是jdk中提供的时间处理类，为什么Oracle还要在java8中再增加time的包来处理时间呢？原因有以下几个：</p>

<ul>
  <li>原本是时间类(java.util.Date和SimpleDateFormatter等)是非线程安全的</li>
  <li>API设计不合理，导致很难用</li>
  <li>为了在jdk内部更好地支持时间的处理</li>
</ul>

<p>java8新的时间库在<code class="highlighter-rouge">java.time</code>包内，由比较流行的第三方时间库<code class="highlighter-rouge">Joda-Time </code>的作者和Oracle共同开发，遵从JSR 310标准。</p>

<h2 id="设计思想">设计思想</h2>

<p>新的java时间类库主要基于以下几点核心思想设计：</p>

<ul>
  <li>不可变类(Immutable-value classes)：新的时间对象会是一个不可变对象，保证线程安全和避免并发问题</li>
  <li>领域模型驱动设计(Domain-driven design)：新的API会非常明确地区分日期(Date)和时间(Time)，不同于以往日期和时间的界限非常模糊</li>
  <li>分离年表(Separation of chronologies)：新的API允许使用者使用不同的日历系统，以便支持世界不同的地区，比如日本和泰国，他们的日历系统不遵从ISO-8601标准。</li>
</ul>

<h2 id="两个关键的类">两个关键的类</h2>

<p>新的时间库中，用来表示时间的两个类有<code class="highlighter-rouge">java.time.LocalDate</code>和<code class="highlighter-rouge">java.time.Time</code>，它们分别表示本地的日期和时间，另外还有一个包含日期时间的类<code class="highlighter-rouge">java.time.LocalDateTime</code>。</p>

<h2 id="创建日期对象">创建日期对象</h2>

<h3 id="创建新的对象">创建新的对象</h3>

<p>新的API创建日期对象创建通过流式工厂方法创建，一般来说，如果通过要创建对象自身的属性创建，使用<code class="highlighter-rouge">of</code>方法，如果是通过其他属性创建，使用<code class="highlighter-rouge">from</code>方法。</p>

<p>所谓通过自身属性，指的是自己具有的属性，比如年，月，日是日期自有的属性，因此创建日期或时间对象时，可以采用如下方式创建：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2012</span><span class="o">,</span> <span class="nc">Month</span><span class="o">.</span><span class="na">DECEMBER</span><span class="o">,</span> <span class="mi">12</span><span class="o">);</span>
<span class="nc">LocalTime</span> <span class="n">time</span> <span class="o">=</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">17</span><span class="o">,</span> <span class="mi">18</span><span class="o">);</span>
</code></pre></div></div>

<p>from的创建方式如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDate</span> <span class="n">date</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">TemporalAccessor</span> <span class="n">accessor</span><span class="o">);</span>
</code></pre></div></div>

<p>这种创建方式相对麻烦，需要实现接口<code class="highlighter-rouge">TemporalAccessor</code>，这个接口是一个框架级的基础接口，主要用来连接一个只读的时间对象，比如日期，时间，或者时间偏移等等，也有可能是一个复合的对象。</p>

<p>另外，创建方法中还提供了<code class="highlighter-rouge">paser</code>接口用来创建对象，比如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalTime</span> <span class="n">time</span> <span class="o">=</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">"10:15:30"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="通过特定计算创建日期对象">通过特定计算创建日期对象</h3>

<p>某些情况下，我们需要对得到的日期时间对象进行计算，比如前移一天，后移一天，由于时间日期类都是不可变类，因此我们不能直接通过setter方法来修改，这里类库中提供了<code class="highlighter-rouge">with</code>方法来帮助我们计算并将得到的结果以一个新对象的方式返回给我们：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Set the value, returning a new object</span>
<span class="nc">LocalDateTime</span> <span class="n">thePast</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">withDayOfMonth</span><span class="o">(</span>
    <span class="mi">10</span><span class="o">).</span><span class="na">withYear</span><span class="o">(</span><span class="mi">2010</span><span class="o">);</span>

<span class="cm">/* You can use direct manipulation methods, 
    or pass a value and field pair */</span>
<span class="nc">LocalDateTime</span> <span class="n">yetAnother</span> <span class="o">=</span> <span class="n">thePast</span><span class="o">.</span><span class="na">plusWeeks</span><span class="o">(</span>
    <span class="mi">3</span><span class="o">).</span><span class="na">plus</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="nc">ChronoUnit</span><span class="o">.</span><span class="na">WEEKS</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="通过适配器创建日期对象">通过适配器创建日期对象</h3>

<p>新的类库中引入了一个<strong>适配器</strong>(<strong>adjuster</strong>)的概念，因此我们也可以通过自己实现一个类<code class="highlighter-rouge">WithAdjuster</code>或<code class="highlighter-rouge">PlusAdjuster</code>来同时设置多个属性创建新对象，这个适配器需要实现接口<code class="highlighter-rouge">java.time.temporal.TemporalAdjuster</code>：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDateTime</span> <span class="n">timePoint</span> <span class="o">=</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
<span class="nc">LocalDateTime</span> <span class="n">foo</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">TemporalAdjusters</span><span class="o">.</span><span class="na">lastDayOfMonth</span><span class="o">());</span>
<span class="nc">LocalDateTime</span> <span class="n">bar</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">TemporalAdjusters</span><span class="o">.</span><span class="na">previousOrSame</span><span class="o">(</span><span class="nc">DayOfWeek</span><span class="o">.</span><span class="na">FRIDAY</span><span class="o">));</span>
<span class="nc">LocalDateTime</span> <span class="n">time</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
</code></pre></div></div>

<p>这里我们需要注意，<code class="highlighter-rouge">LocalDateTime</code>这个类，本身就是<code class="highlighter-rouge">java.time.temporal.TemporalAdjuster</code>的实现类，实际上我们是可以自己实现的。</p>

<h3 id="获取精确的时间对象">获取精确的时间对象</h3>

<p>新的时间库还提供了<code class="highlighter-rouge">truncatedTo </code>方法来获得一个精确的时间点，只要提供了明确的日期，时间，或者日期时间，即可，但是开发者可以不关注这里的实现细节，比如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDateTime</span> <span class="n">truncatedTime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="na">truncatedTo</span><span class="o">(</span><span class="nc">ChronoUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="获取属性的接口">获取属性的接口</h3>

<p>日期时间对象提供了一些标准的getter接口用来给我们获取相应的信息，比如：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LocalDate theDate = timePoint.toLocalDate();
Month month = timePoint.getMonth();
int day = timePoint.getDayOfMonth();
timePoint.getSecond();
</code></pre></div></div>

<p>这里要注意，获取得到的月份不再是一个普通的数值，而是一个<code class="highlighter-rouge">Month</code>对象，这个对象是一个枚举类型，从1月到12月。</p>

<h2 id="时区的概念time-zone">时区的概念(Time Zone)</h2>

<p>在前面提到的几个Local类里，抽象了由时区问题引入的复杂性，时区是一个规则的合集，在使用标准时间的地区，同一个时区的时间是一致的，全球大约有40个时区，时区的定义是通过与世界协调时间(UTC)的偏移量定义的，一般来说不同的时区时间是不一致的，但是时间差是固定的。</p>

<p>时区一般通过两个标识指定</p>

<ul>
  <li>短名(abbreviated)：如“PLT”</li>
  <li>长名(longer)：如“Asia/Karachi”</li>
</ul>

<p>这里官网有一句话我并不是特别理解，摘抄如下：</p>

<blockquote>
  <p>When designing your application, you should consider what scenarios are appropriate for using time zones and when offsets are appropriate.</p>
</blockquote>

<p>大体的意思是在设计程序的时候，我们需要考虑脚本(或者说代码？)对于使用的时区的偏移是恰当的。</p>

<p>在java8的时间类库里，使用<code class="highlighter-rouge">java.time.ZoneId</code>来标识一个时区，我们可以通过本地时间配合<code class="highlighter-rouge">ZoneId</code>来获取当前时区的时间，如下:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDateTime</span> <span class="n">time</span> <span class="o">=</span> <span class="n">timePoint</span><span class="o">.</span><span class="na">with</span><span class="o">(</span><span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
<span class="c1">// You can specify the zone id when creating a zoned date time</span>
<span class="nc">ZoneId</span> <span class="n">id</span> <span class="o">=</span> <span class="nc">ZoneId</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Europe/Paris"</span><span class="o">);</span>
<span class="nc">ZonedDateTime</span> <span class="n">zoned</span> <span class="o">=</span> <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">time</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
</code></pre></div></div>

<p>类库中还提供了<code class="highlighter-rouge">java.time.ZoneOffset</code>来表示时区时间和标准时间(UTC)的时差，如：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ZoneOffset</span> <span class="n">offset</span> <span class="o">=</span> <span class="nc">ZoneOffset</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"+2:00"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="新类库中的时区类">新类库中的时区类</h3>

<p>前面我们已经接触到一些时区相关的类了，现在我们再来深入一点看看新的时间类库中提供了跟时区相关的那些类。</p>

<h4 id="zoneddatetime-"><code class="highlighter-rouge">ZonedDateTime </code></h4>

<p><code class="highlighter-rouge">ZonedDateTime </code>类我们在前面已经看过了，这个类表示的是一个日期和时间，可以通过这个类可以计算得到所有时区的对应时间，如果希望得到一个跟时区无关的日期和时间对象，建议使用这个类，类的创建如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ZonedDateTime</span> <span class="n">zoned</span> <span class="o">=</span><span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="s">"2007-12-03T10:15:30+01:00[Europe/Paris]"</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="offsetdatetime"><code class="highlighter-rouge">OffsetDateTime</code></h4>

<p><code class="highlighter-rouge">OffsetDateTime</code>这个类我们前面也见过了，它表示了一个时间偏移，一般用于序列化存储到数据库，如果我们的服务器在不同的时区，也应当用这个类序列化为日志的时间戳以便服务器日志时间的统一，使用示例如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ZoneOffset</span> <span class="n">offset</span> <span class="o">=</span> <span class="nc">ZoneOffset</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"+2:00"</span><span class="o">);</span>
<span class="nc">OffsetTime</span> <span class="n">time</span> <span class="o">=</span> <span class="nc">OffsetTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
<span class="c1">// changes offset, while keeping the same point on the timeline</span>
<span class="nc">OffsetTime</span> <span class="n">sameTimeDifferentOffset</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="na">withOffsetSameInstant</span><span class="o">(</span>
    <span class="n">offset</span><span class="o">);</span>
<span class="c1">// changes the offset, and updates the point on the timeline</span>
<span class="nc">OffsetTime</span> <span class="n">changeTimeWithNewOffset</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="na">withOffsetSameLocal</span><span class="o">(</span>
    <span class="n">offset</span><span class="o">);</span>
<span class="c1">// Can also create new object with altered fields as before</span>
<span class="n">changeTimeWithNewOffset</span>
 <span class="o">.</span><span class="na">withHour</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span>
 <span class="o">.</span><span class="na">plusSeconds</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</code></pre></div></div>

<blockquote>
  <p>需要注意的是，在旧的类库中，已经存在一个<code class="highlighter-rouge">java.util.TimeZone</code>了，但是并没有在新的类库中使用这个类，主要是因为新的类库要求时间类是不可变对象，而这个已有的类是可变的。</p>
</blockquote>

<h4 id="javatimeperiod"><code class="highlighter-rouge">java.time.Period</code></h4>

<p><code class="highlighter-rouge">java.time.Period</code>表示一个周期，与我们前面看到的类都不同，这个类表示的是一个时间段，比如3个月多1天这个时间段，而不是一个日期或者时间点，使用示例如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">LocalDate</span> <span class="n">oldDate</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
<span class="nc">ZonedDateTime</span> <span class="n">oldDateTime</span> <span class="o">=</span> <span class="nc">ZonedDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
<span class="c1">// 3 years, 2 months, 1 day</span>
<span class="nc">Period</span> <span class="n">period</span> <span class="o">=</span> <span class="nc">Period</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>

<span class="c1">// You can modify the values of dates using periods</span>
<span class="nc">LocalDate</span> <span class="n">newDate</span> <span class="o">=</span> <span class="n">oldDate</span><span class="o">.</span><span class="na">plus</span><span class="o">(</span><span class="n">period</span><span class="o">);</span>
<span class="nc">ZonedDateTime</span> <span class="n">newDateTime</span> <span class="o">=</span> <span class="n">oldDateTime</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="n">period</span><span class="o">);</span>
</code></pre></div></div>

<h4 id="javatimeduration"><code class="highlighter-rouge">java.time.Duration</code></h4>

<p><code class="highlighter-rouge">java.time.Duration</code>类也是表示一个时间段，和<code class="highlighter-rouge">Period</code>类似，使用如下：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// A duration of 3 seconds and 5 nanoseconds</span>
<span class="nc">Duration</span> <span class="n">duration</span> <span class="o">=</span> <span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
<span class="nc">Duration</span> <span class="n">oneDay</span> <span class="o">=</span> <span class="nc">Duration</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">today</span><span class="o">,</span> <span class="n">yesterday</span><span class="o">);</span>
</code></pre></div></div>

<p><code class="highlighter-rouge">java.time.Duration</code>与<code class="highlighter-rouge">java.time.Period</code>的不同之处在于，<code class="highlighter-rouge">Duration</code>是允许加减和<code class="highlighter-rouge">with</code>操作的，因此也可以用它来改变一个日期或者时间的值。</p>

<blockquote>
  <p>注：这里其实我也并不是非常理解两者的区别，上面的解释是根据官方文档翻译得出的。这里摘抄一下原文：
It’s possible to perform normal plus, minus, and “with” operations on a Duration instance and also to modify the value of a date or time using the Duration.</p>
</blockquote>

<h4 id="年表chronologies">年表(Chronologies)</h4>

<p>年表主要的设计目的是支持使用非ISO标准日历系统的开发者使用的，java8引入了年表(Chronology)的概念，它主要应用于给一个时间点作为一个工厂来表明一个日历系统和动作，这句话理解起来 有点拗口，我们分开来解读一下。</p>

<p>首先，<code class="highlighter-rouge">Chronology</code>是一个工厂，用来创建一个时间点对象的，这个时间点对象是在标准ISO日历系统中的。
其次，<code class="highlighter-rouge">Chronology</code>表明了一个时间点，这个时间点是在非标准ISO日历系统中的。
因此，<code class="highlighter-rouge">Chronology</code>实际上是把非标准日历时间点和标准日历时间点一一对应起来的对象，一个<code class="highlighter-rouge">Chronology</code>表明一个非标准时间点，然后通过<code class="highlighter-rouge">Chronology</code>可以创建出一个和它说表示的非标准时间点对应的标准时间点。</p>

<p>跟年表相关的类有如下几个：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span><span class="o">.</span><span class="na">time</span><span class="o">.</span><span class="na">Chronology</span><span class="o">:</span>
<span class="n">java</span><span class="o">.</span><span class="na">time</span><span class="o">.</span><span class="na">ChronoLocalDate</span>
<span class="n">java</span><span class="o">.</span><span class="na">time</span><span class="o">.</span><span class="na">ChronoLocalDateTime</span>
<span class="n">java</span><span class="o">.</span><span class="na">time</span><span class="o">.</span><span class="na">ChronoZonedDateTime</span>
</code></pre></div></div>

<p>实际上，如果不是必须的情况下，我们都不应该使用年表对象，官方也不建议我们使用。</p>

<h4 id="公用类">公用类</h4>

<p>除了上面说的，java8还提供了一些公用的类：</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span><span class="o">.</span><span class="na">time</span><span class="o">.</span><span class="na">MonthDay</span><span class="o">;</span><span class="c1">//包含了一个Month对象和Day对象表示月和日</span>
<span class="n">java</span><span class="o">.</span><span class="na">time</span><span class="o">.</span><span class="na">YearMonth</span><span class="o">;</span><span class="c1">//包含了年和月的对象</span>
</code></pre></div></div>

<p>上面两个类比较好理解，不多说了。</p>

<p>在java8之后，jdbc的标准中也增加了对新的时间类的支持，但是并没有改变原来的接口规范，而是通过原有的<code class="highlighter-rouge">setObject</code>和<code class="highlighter-rouge">getObject</code>接口来支持的。</p>

<p>数据库类型和java类型的对应表如下：</p>

<table>
  <thead>
    <tr>
      <th>ANSI SQL</th>
      <th>Java SE 8</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>DATE</td>
      <td>LocalDate</td>
    </tr>
    <tr>
      <td>TIME</td>
      <td>LocalTime</td>
    </tr>
    <tr>
      <td>TIMESTAMP</td>
      <td>LocalDateTime</td>
    </tr>
    <tr>
      <td>TIME WITH TIMEZONE</td>
      <td>OffsetTime</td>
    </tr>
    <tr>
      <td>TIMESTAMP WITH TIMEZONE</td>
      <td>OffsetDateTime</td>
    </tr>
  </tbody>
</table>

<h2 id="总结">总结</h2>

<p>java8中新增的时间包提供了更多的特性支持，接口的使用也简单了许多，所以在需要使用时间对象的时候，我们应该优先选择使用这个新的类库，当然，在使用之前要注意，使用的数据库对应的版本号是否支持使用java8的时间对象。</p>

:ET